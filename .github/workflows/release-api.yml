name: Automatically Release API

on:
  push:
    branches: [ "main" ]

jobs:
  release:
    permissions:
      contents: write
    env:
      OUTPUT_DIR: "output"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          submodules: true
      - name: Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: src/Hitorus.Api/Hitorus.Api.csproj
      - name: Set env FILE_CHANGED
        run:
          echo "FILE_CHANGED=${{ steps.changed-files.outputs.any_changed }}" >> $GITHUB_ENV
      - name: Set env CURRENT_VERSION
        if: ${{ fromJson(env.FILE_CHANGED) }}
        run: |
          currentVersion=$(cat 'src/Hitorus.Api/Hitorus.Api.csproj' | sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p')
          echo "CURRENT_VERSION=$currentVersion" >> $GITHUB_ENV
      - if: ${{ fromJson(env.FILE_CHANGED) }}
        run: git fetch --tags origin
      - id: get-prev-tag
        if: ${{ fromJson(env.FILE_CHANGED) }}
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          prefix: v
          fallback: v0.0.0
      - name: Trim out prefix "v" from latest release version and set env LATEST_RELEASE_VERSION
        if: ${{ fromJson(env.FILE_CHANGED) }}
        run: |
          tagWithV=${{steps.get-prev-tag.outputs.tag}}
          echo "LATEST_RELEASE_VERSION=${tagWithV:1}" >> $GITHUB_ENV
      - name: Set env CREATE_RELEASE
        run: |
          if [ "$FILE_CHANGED" == "true" ] && [ "$CURRENT_VERSION" != "$LATEST_RELEASE_VERSION" ]; then
              createRelease="true"
          else
              createRelease="false"
          fi
          echo "CREATE_RELEASE=$createRelease" >> $GITHUB_ENV
      - name: Setup dotnet
        if: ${{ fromJson(env.CREATE_RELEASE) }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'
      - name: Publish for each runtime
        if: ${{ fromJson(env.CREATE_RELEASE) }}
        run: |
          echo "Releasing version $CURRENT_VERSION"
          python generate-resx.py 1
          declare -a runtimes=('win-x64' 'win-arm64' 'linux-x64' 'linux-arm64' 'osx-x64' 'osx-arm64')
          cd "$OUTPUT_DIR"
          for r in "${runtimes[@]}"
          do
            releaseName="Hitorus-v$CURRENT_VERSION-$r"
            dotnet publish ../src/Hitorus.Api --output "$releaseName" -r "$r"
            mkdir "$releaseName/Galleries"
            zip -r "$releaseName.zip" "$releaseName"
          done
      - name: Create release
        if: ${{ fromJson(env.CREATE_RELEASE) }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ format('{0}/*.zip', env.OUTPUT_DIR) }}
          tag: ${{ format('v{0}', env.CURRENT_VERSION) }}
